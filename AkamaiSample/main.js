const {promisify} = require('bluebird');
const jwtVerify = promisify(require('jsonwebtoken').verify);
const jwtDecode = require('jsonwebtoken').decode;
const EdgeGrid = require('edgegrid');
const akamaiHost = "";

/**
 * Get the public key used to verify that the notification payload is generated by your Certificate Manager instance.
 * @param body Object
 * @param certificateManagerApiUrl
 * @returns {Promise<publicKey>}
 */
const getPublicKey = async (body, certificateManagerApiUrl) => {
    console.log(`Get public key for instance ${body.instance_crn}`);
    const keysOptions = {
        method: 'GET',
        url: `${certificateManagerApiUrl}/api/v1/instances/${encodeURIComponent(body.instance_crn)}/notifications/publicKey?keyFormat=pem`,
        headers: {'cache-control': 'no-cache'}
    };
    let response;
    try {
        response = await request(keysOptions);
    }
    catch (err) {
        console.log(`Couldn't get the public key for instance ${body.instance_crn}. Reason is: ${getErrorString(err)}`);
        throw new Error(`Couldn't get the public key for instance ${body.instance_crn}`);
    }
    if (response.statusCode !== 200) {
        console.error(`Couldn't get the public key for instance ${body.instance_crn} . Reason is: status code ${response.statusCode} and body ${JSON.stringify(response.body)}`);
        throw new Error(`Couldn't get the public key for instance ${body.instance_crn}`);
    }
    return response.body.publicKey;
};

/**
 * Add TXT record to domain
 * @param zoneName zone name
 * @param payload challenge data
 * @param userInfo user credentials
 * @returns {Promise<void>}
 */
const addTxtRecord = async (zoneName, payload, userInfo) => {
    const recordName = payload.challenge.txt_record_name;
    const recordValue = payload.challenge.txt_record_val;
    console.log(`Add TXT record "${recordValue}" to zone ${zoneId}`);

    var data = '{"name": recordName, "type": "txt", "ttl": 60, "rdata": [recordValue]}';

    var eg = new EdgeGrid(userInfo.clientToken, userInfo.clientSecret, userInfo.accessToken, `https://"${akamaiHost}"/`);

    eg.auth({
        path: `/config-dns/v2/zones/${zoneName}/names/${recordName}/types/txt`,
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: data
    });

    eg.send(function(error, response, body) {
       if (error) {
           console.log(`Couldn't add TXT record "${recordValue}" to zone ${zoneName}. Reason is: ${getErrorString(err)}`);
           throw new Error(`Couldn't add TXT record "${recordValue}" to zone ${zoneName}`);
       }

       if (response.statusCode !== 201) {
           console.log(`Couldn't add TXT record "${recordValue}" to zone ${zoneName}. Reason is: status code ${response.statusCode} and body ${JSON.stringify(response.body)}`);
            throw new Error(`Couldn't add TXT record "${recordValue}" to zone ${zoneName}`);
        }

        console.log(`TXT record "${recordValue}" added to zone ${zoneName} successfully.`);
    });
};

/**
 * Get zone id by domain.
 * @param domain
 * @param userInfo user credentials
 * @returns {Promise<zoneId>}
 */
const getZoneIdByDomain = async (domain, userInfo) => {
    console.log(`Get zone id for domain ${domain}`);
    const options = {
        method: 'GET',
        uri: `${akamaiHost}/config-dns/v2/zones?search=${encodeURIComponent(domain)}&showAll=true}`,
        auth: {user: userInfo.user, pass: userInfo.apiKey}
    };
    let response;
    try {
        response = await request(options);
    }
    catch (err) {
        console.error(`Couldn't get zone for domain "${domain}". Reason is: ${getErrorString(err)}`);
        throw new Error(`Couldn't get zone for domain "${domain}"`);
    }
    if (response.statusCode !== 200) {
        console.error(`Couldn't get zone for domain ${domain}. Reason is: status code "${response.statusCode}" and body ${JSON.stringify(response.body)}`);
        throw new Error(`Couldn't get zone for domain "${domain}"`);
    }
    if (response.body.length === 0) {
        console.error(`Couldn't find domain ${domain}.`);
        throw new Error(`Couldn't find domain ${domain}`);
    }
    console.log(`Get zone for domain "${domain}" finished successfully with body: ${JSON.stringify(response.body)}`);
    return response.body[0].id;
};

/**
 * Get challenge DNS TXT record ids
 * @param zoneId
 * @param payload challenge data
 * @param userInfo user credentials
 * @returns {Promise<[]>}
 */
const getTxtRecords = async (zoneId, payload, userInfo) => {
    const recordName = payload.challenge.txt_record_name;
    const recordValue = payload.challenge.txt_record_val;
    console.log(`Get records named ${recordName} from zone ${zoneId}`);
    const options = {
        method: 'GET',
        uri: `${akamaiHost}/SoftLayer_Dns_Domain/${zoneId}/getResourceRecords?objectFilter={"resourceRecords":{"host":{"operation": "${recordName}"},"data":{"operation": "${recordValue}"}}}`,
        auth: {user: userInfo.user, pass: userInfo.apiKey}
    };
    let response;
    try {
        response = await request(options);
    }
    catch (err) {
        console.error(`Couldn't get record named ${recordName}. Reason is: ${getErrorString(err)}`);
        throw new Error(`Couldn't get record named ${recordName}`);
    }
    if (response.statusCode !== 200) {
        console.error(`Couldn't get records named ${recordName}. Reason is: status code ${response.statusCode} and body ${JSON.stringify(response.body)}`);
        throw new Error(`Couldn't get record named ${recordName}`);
    }
    console.log(`Get records named ${recordName} returned ${response.body.length} results.`);
    return response.body;
};

/**
 * Delete single TXT record from zone.
 * @param recordId
 * @param userInfo user credentials
 * @returns {Promise<void>}
 */
const removeTxtRecord = async (recordId, userInfo) => {
    console.log(`Delete TXT record "${recordId}"`);
    const options = {
        method: 'DELETE',
        uri: `${akamaiHost}/SoftLayer_Dns_Domain_ResourceRecord/${recordId}`,
        auth: {user: userInfo.user, pass: userInfo.apiKey}
    };
    let response;
    try {
        response = await request(options);
    }
    catch (err) {
        console.log(`Couldn't delete TXT record "${recordId}". Reason is: ${getErrorString(err)}`);
        throw new Error(`Couldn't delete TXT record "${recordId}"`);
    }
    if (response.statusCode !== 200) {
        console.log(`Couldn't delete TXT record "${recordId}". Reason is: status code ${response.statusCode} body ${JSON.stringify(response.body)}`);
        throw new Error(`Couldn't delete TXT record "${recordId}"`);
    }
    console.log(`Delete TXT record "${recordId}" finished successfully.`);
};

/**
 * Set the challenge .
 * @param payload notification with challenge
 * @param userInfo user credentials
 * @returns {Promise<void>}
 */
const setChallenge = async (payload, userInfo) => {
    console.log(`Set Akamai challenge: '${payload.domain} : ${JSON.stringify(payload.challenge)}`);

    let domain = payload.domain;
    //remove wildcard in case its wildcard certificate.
    domain = domain.replace('*.', '');
    await addTxtRecord(domain, payload, userInfo);
};

/**
 * Remove TXT record of challenge
 * @param payload
 * @param userInfo user credentials
 * @returns {Promise<void>}
 */
const removeChallenge = async (payload, userInfo) => {
    console.log(`Remove Akamai challenge: '${payload.domain} : ${JSON.stringify(payload.challenge)}`);
    return {
        statusCode: 200,
        headers: {'Content-Type': 'application/json'},
        body: {}
    };

    let domain = payload.domain;
    //remove wildcard in case its wildcard certificate.
    domain = domain.replace('*.', '');
    const zoneId = await getZoneIdByDomain(domain, userInfo);
    const records = await getTxtRecords(zoneId, payload, userInfo);
    await Promise.all(records.map(r => removeTxtRecord(r.id, userInfo).catch()));
    console.log(`Remove challenge for domain ${domain} finished.`);
};

/**
 *
 * main() will be run when you invoke this action
 *
 * @param params Cloud Functions actions accept a single parameter, which must be a JSON object.
 *
 * @return The output of this action, which must be a JSON object.
 *
 */
const main = async (params)=> {
    console.log("Cloud function invoked.");
    try {

        const body = jwtDecode(params.data);

        // Validate that the notification was sent from a Certificate Manager instance that has allowed access
        if (!params.allowedCertificateManagerCRNs || !params.allowedCertificateManagerCRNs[body.instance_crn]) {
            console.error(`Certificate Manager instance ${body.instance_crn} is not allowed to invoke this action`);
            return Promise.reject({
                statusCode: 403,
                headers: {'Content-Type': 'application/json'},
                body: {message: 'Unauthorized'},
            });
        }
        const certificateManagerApiUrl = `https://${params.cmRegion}.certificate-manager.cloud.ibm.com`;
        const publicKey = await getPublicKey(body, certificateManagerApiUrl);
        const decodedNotification = await jwtVerify(params.data, publicKey);
        akamaiHost = params.host;
        const userInfo = {
            client_secret: params.client_secret,
            access_token: params.access_token,
            client_token: params.client_token
        };

        console.log(`Notification message body: ${JSON.stringify(decodedNotification)}`);
        switch (decodedNotification.event_type) {
            // Handle other certificate manager event types.
            // ...

            // Handling domain validation event types.
            case "cert_domain_validation_required":
                await setChallenge(decodedNotification, userInfo);
                break;
            case "cert_domain_validation_completed":
                await removeChallenge(decodedNotification, userInfo);
                break;
        }
    }
    catch (err) {
        console.log(`Action failed. Reason: ${getErrorString(err)}`);
        return Promise.reject({
            statusCode: err.statusCode ? err.statusCode : 500,
            headers: {'Content-Type': 'application/json'},
            body: {message: err.message ? err.message : 'Error processing your request'},
        });
    }
    return {
        statusCode: 200,
        headers: {'Content-Type': 'application/json'},
        body: {}
    };
};

const getErrorString = (error) => {
    if (error)
        return (typeof error.message === 'string') ? error.message : JSON.stringify(error);
    else
        return 'Error undefined';
};
