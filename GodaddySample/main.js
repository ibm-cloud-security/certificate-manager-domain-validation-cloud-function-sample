const {promisify} = require('bluebird');
let request = promisify(require('request'));
request = request.defaults({json: true});
const jwtVerify = promisify(require('jsonwebtoken').verify);
const jwtDecode = require('jsonwebtoken').decode;
const godaddyBaseUrl = "https://api.godaddy.com/v1";

/**
 * Get the public key used to verify that the notification payload is generated by your Certificate Manager instance.
 * @param body Object
 * @param certificateManagerApiUrl
 * @returns {Promise<publicKey>}
 */
const getPublicKey = async (body, certificateManagerApiUrl) => {
    console.log(`Get public key for instance ${body.instance_crn}`);
    const keysOptions = {
        method: 'GET',
        url: `${certificateManagerApiUrl}/api/v1/instances/${encodeURIComponent(body.instance_crn)}/notifications/publicKey?keyFormat=pem`,
        headers: {'cache-control': 'no-cache'}
    };
    let response;
    try {
        response = await request(keysOptions);
    }
    catch (err) {
        console.log(`Couldn't get the public key for instance ${body.instance_crn}. Reason is: ${getErrorString(err)}`);
        throw new Error(`Couldn't get the public key for instance ${body.instance_crn}`);
    }
    if (response.statusCode !== 200) {
        console.error(`Couldn't get the public key for instance ${body.instance_crn} . Reason is: status code ${response.statusCode} and body ${JSON.stringify(response.body)}`);
        throw new Error(`Couldn't get the public key for instance ${body.instance_crn}`);
    }
    return response.body.publicKey;
};

/**
 * Add TXT record to domain
 * @param domain domain name
 * @param payload challenge data
 * @param userInfo user credentials
 * @returns {Promise<void>}
 */
const addTxtRecord = async (domain, payload, userInfo) => {
    const domainParts = domain.split(".");
    const domainPrefix = domainParts.slice(0, (domainParts.length - 2)).join(".");
    const domainSuffix = domainParts.slice(-2).join(".");
    const recordName = payload.challenge.txt_record_name + (domainPrefix === "" ? "" : ("." + domainPrefix)); //_acme_challenge or _acme_challenge.[subdomain] if available
    const recordValue = payload.challenge.txt_record_val;
    const url = `${godaddyBaseUrl}/domains/${domainSuffix}/records/TXT/${encodeURIComponent(recordName)}`;
    console.log(`Add TXT record with name "${recordName}" and value "${recordValue}" to ${domainSuffix} (final URL: ${url})`);
    
    const options = {
        method: 'PUT',
        uri: url,
        headers: {
            'Authorization': "sso-key " + userInfo.godaddyKey + ":" + userInfo.godaddySecret,
            'Content-Type': 'application/json'
        },
        json: [{"data":recordValue, ttl:1800}]
    };
    let response;
    
    try {
        response = await request(options);
    } catch (err) {
        console.log(`Couldn't add TXT record "${recordValue}". Reason is: ${getErrorString(err)}`);
        throw new Error(`Couldn't add TXT record ${recordValue} to domain ${domain}`);
    }
    
    switch (response.statusCode) {
        case 200:
            console.log(`TXT record "${recordValue}" added to ${domain} successfully.`);
            break;
        case 400:
            console.log(`Request failed: ${response.body}`);
            break;
        default:
            console.log(`Couldn't add TXT record "${recordValue}" to ${domain}. Reason is: status code ${response.statusCode} and body ${JSON.stringify(response.body)}`);
            throw new Error(`Couldn't add TXT record "${recordValue}" to ${domain}`);
    }
};

/**
 * Set the challenge .
 * @param payload notification with challenge
 * @param userInfo user credentials
 * @returns {Promise<void>}
 */
const setChallenge = async (payload, userInfo) => {
    console.log(`Set challenge: '${payload.domain} : ${JSON.stringify(payload.challenge)}`);
    let domain = payload.domain;
    //remove wildcard in case its wildcard certificate.
    domain = domain.replace('*.', '');
    await addTxtRecord(domain, payload, userInfo);
};

/**
 * Remove TXT record of challenge
 * @param payload
 * @param userInfo user credentials
 * @returns {Promise<void>}
 */
const removeChallenge = async (payload, userInfo) => {
    const recordName = payload.challenge.txt_record_name;
    let domain = payload.domain;
    //remove wildcard in case its wildcard certificate.
    domain = domain.replace('*.', '');
    
    const options = {
        method: 'PUT',
        uri: `${godaddyBaseUrl}/domains/${domain}/records/TXT/${recordName}`,
        headers: {
            'Authorization': "sso-key " + userInfo.godaddyKey + ":" + userInfo.godaddySecret,
            'Content-Type': 'application/json'
        },
        json: []
    };
    
    let response;
    
    try {
        response = await request(options);
    } catch (err) {
        console.error(`Couldn't remove ${recordName}. Reason is: ${getErrorString(err)}`);
        throw new Error(`Couldn't get record named ${recordName}`);
    }
    
    switch (response.statusCode) {
        case 200:
            console.log(`Removed TXT record "${recordName}" successfully`);
            break;
        case 400:
            console.log(`Request failed: ${response.body}`);
            break;
        default:
            console.log(`Couldn't remove TXT record "${recordName}" from ${domain}: status code ${response.statusCode} and body ${JSON.stringify(response.body)}`);
            throw new Error(`Couldn't add TXT record "${recordValue}" to ${domain}`);
    }
};

/**
 *
 * main() will be run when you invoke this action
 *
 * @param params Cloud Functions actions accept a single parameter, which must be a JSON object.
 *
 * @return The output of this action, which must be a JSON object.
 *
 */
const main = async (params)=> {
    try {
        const body = jwtDecode(params.data);

        // Validate that the notification was sent from a Certificate Manager instance that has allowed access
        if (!params.allowedCertificateManagerCRNs || !params.allowedCertificateManagerCRNs[body.instance_crn]) {
            console.error(`Certificate Manager instance ${body.instance_crn} is not allowed to invoke this action`);
            return Promise.reject({
                statusCode: 403,
                headers: {'Content-Type': 'application/json'},
                body: {message: 'Unauthorized'},
            });
        }

        const certificateManagerApiUrl = `https://${body.instance_crn.split(":")[5]}.certificate-manager.cloud.ibm.com`;
        const publicKey = await getPublicKey(body, certificateManagerApiUrl);
        const decodedNotification = await jwtVerify(params.data, publicKey);
        const userInfo = {
            godaddyKey: params.godaddyKey,
            godaddySecret: params.godaddySecret
        };

        console.log(`Notification message body: ${JSON.stringify(decodedNotification)}`);
        switch (decodedNotification.event_type) {
            case "test_notification_channel":
                console.log("Received a test notification");
                break;
            case "cert_issued":
                console.log("Cert issued!");
                break;
            case "cert_domain_validation_required":
                await setChallenge(decodedNotification, userInfo);
                break;
            case "cert_domain_validation_completed":
                await removeChallenge(decodedNotification, userInfo);
                break;
        }
    }
    catch (err) {
        console.log(`Action failed. Reason:${getErrorString(err)}`);
        return Promise.reject({
            statusCode: err.statusCode ? err.statusCode : 500,
            headers: {'Content-Type': 'application/json'},
            body: {message: err.message ? err.message : 'Error processing your request'},
        });
    }
    return {
        statusCode: 200,
        headers: {'Content-Type': 'application/json'},
        body: {}
    };
};

const getErrorString = (error) => {
    if (error)
        return (typeof error.message === 'string') ? error.message : JSON.stringify(error);
    else
        return 'Error undefined';
};

